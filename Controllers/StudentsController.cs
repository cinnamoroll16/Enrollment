using EnrollmentSystem.Web.Data;
using EnrollmentSystem.Web.Models;
using EnrollmentSystem.Web.Models.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace EnrollmentSystem.Controllers
{
    public class StudentsController : Controller
    {
        private readonly ApplicationDbContext dbContext;

        public StudentsController(ApplicationDbContext dbContext) 
        {
            this.dbContext = dbContext;
        }
        public IActionResult Add()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Add(AddStudentViewModel viewModel)
        {
            var student = new Student
            {
                // No need to manually set the Id. It will be generated by the database.
                StudentId = viewModel.StudentId,
                StudentLastName = viewModel.StudentLastName,
                StudentFirstName = viewModel.StudentFirstName,
                StudentCourse = viewModel.StudentCourse,
                StudentMiddleName = viewModel.StudentMiddleName,
                StudentRemarks = viewModel.StudentRemarks,
                StudentStatus = viewModel.StudentStatus,
                StudentYear = viewModel.StudentYear
            };

            await dbContext.Students.AddAsync(student);
            await dbContext.SaveChangesAsync();

            return RedirectToAction("List", "Students");
        }

        [HttpGet]
        public async Task<IActionResult> List()
        {
            var students = await dbContext.Students.ToListAsync();
            return View(students);
        }

        [HttpGet]  
        public async Task<IActionResult> Edit(Guid Id)
        {
            var student = await dbContext.Students.FindAsync(Id);
            return View(student);
        }
        [HttpPost]
        public async Task<IActionResult> Edit(Student viewModel)
        {
            var student = await dbContext.Students.FindAsync(viewModel.Id);

            if (student is not null) 
            {
                student.StudentId = viewModel.StudentId;
                student.StudentFirstName = viewModel.StudentFirstName;
                student.StudentMiddleName = viewModel.StudentMiddleName;
                student.StudentLastName = viewModel.StudentLastName;
                student.StudentStatus = viewModel.StudentStatus;
                student.StudentYear = viewModel.StudentYear;
                student.StudentCourse = viewModel.StudentCourse;
                student.StudentRemarks = viewModel.StudentRemarks;

                await dbContext.SaveChangesAsync();
            }

            return RedirectToAction("List", "Students");
        }
        [HttpGet]
        public async Task<IActionResult> Delete(Guid Id)
        {
            var student = await dbContext.Students.FindAsync(Id);
            return View(student);
        }
        [HttpPost]
        public async Task<IActionResult> Delete(Student viewModel)
        {
            var student = await dbContext.Students
                .AsNoTracking()
                .FirstOrDefaultAsync(x => x.Id == viewModel.Id);

            if (student is not null)
            {
                dbContext.Students.Remove(viewModel);
                await dbContext.SaveChangesAsync();
            }
            return RedirectToAction("List", "Students");
        }

        public async Task<IActionResult> Create(Student student)
        {
            if (ModelState.IsValid)
            {
                // Assuming the student.Id is set by the user
                dbContext.Students.Add(student);
                await dbContext.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(student);
        }

    }
}
